syntax = "proto3";

option go_package = "/token-service.v1";

package tokenservice;

import "google/protobuf/struct.proto";
import "google/api/annotations.proto";

// TokenService defines the gRPC service for token operations.
// It includes methods for generating, refreshing, revoking tokens, and generating nonces.
service TokenService {
  // Generate creates a new access token and refresh token based on the provided claims and DPoP proof.
  rpc Generate(GenerateRequest) returns (GenerateResponse) {
    option (google.api.http) = {
        post: "/v1/generate"
        body: "*"
      };
  }

  // Refresh generates a new access token and refresh token using the provided refresh token and DPoP proof.
  rpc Refresh(RefreshRequest) returns (RefreshResponse) {
    option (google.api.http) = {
        post: "/v1/refresh"
        body: "*"
      };
  }

  // GenerateNonce creates a new nonce based on the provided claims.
  rpc GenerateNonce(GenerateNonceRequest) returns (GenerateNonceResponse) {
    option (google.api.http) = {
        post: "/v1/generate-nonce"
        body: "*"
      };
  }
}

// GenerateRequest is the request message for the Generate RPC.
// It includes the claims and DPoP proof required to generate a new token.
message GenerateRequest {
    Claims claims = 1 [json_name = "claims"]; // Claims to be included in the token.
    int64 access_token_ttl = 2 [json_name = "access_token_ttl"]; // The time-to-live of the access token in minutes.
    int64 refresh_token_ttl = 3 [json_name = "refresh_token_ttl"]; // The time-to-live of the refresh token in minutes.
    DPoP dpop = 4 [json_name = "dpop"]; // DPoP proof for the token.
}

// GenerateResponse is the response message for the Generate RPC.
// It includes the generated access token, refresh token, and the expiration time.
message GenerateResponse {
    string access_token = 1 [json_name = "access_token"]; // The generated access token.
    string refresh_token = 2 [json_name = "refresh_token"]; // The generated refresh token.
    int64 access_token_expiry = 3 [json_name = "access_token_expiry"]; // The expiration time of the access token in seconds.
    int64 refresh_token_expiry = 4 [json_name = "refresh_token_expiry"]; // The expiration time of the refresh token in seconds.
}

// RefreshRequest is the request message for the Refresh RPC.
// It includes the refresh token and DPoP proof required to generate a new token.
message RefreshRequest {
    string refresh_token = 1 [json_name = "refresh_token"]; // The refresh token used to generate a new access token.
    int64 access_token_ttl = 2 [json_name = "access_token_ttl"]; // The time-to-live of the access token in minutes.
    int64 refresh_token_ttl = 3 [json_name = "refresh_token_ttl"]; // The time-to-live of the refresh token in minutes.
    DPoP refresh_dpop = 4 [json_name = "refresh_dpop"]; // DPoP proof for the token.
    DPoP new_token_dpop = 5 [json_name = "new_token_dpop"]; // DPoP proof for the new token.
    repeated string required_scopes = 6 [json_name = "required_scopes"];
}

// RefreshResponse is the response message for the Refresh RPC.
// It includes the new access token, refresh token, and the expiration time.
message RefreshResponse {
    string access_token = 1 [json_name = "access_token"]; // The new access token.
    string refresh_token = 2 [json_name = "refresh_token"]; // The new refresh token.
    int64 access_token_expiry = 3 [json_name = "access_token_expiry"]; // The expiration time of the access token in seconds.
    int64 refresh_token_expiry = 4 [json_name = "refresh_token_expiry"]; // The expiration time of the refresh token in seconds.
}

// GenerateNonceRequest is the request message for the GenerateNonce RPC.
// It includes the claims required to generate a new nonce.
message GenerateNonceRequest {
    Claims claims = 1 [json_name = "claims"]; // Claims to be included in the nonce.
    int64 nonce_ttl = 2 [json_name = "nonce_ttl"]; // The time-to-live of the nonce in minutes.
}

// GenerateNonceResponse is the response message for the GenerateNonce RPC.
// It includes the generated nonce and the expiration time.
message GenerateNonceResponse {
    string nonce = 1 [json_name = "nonce"]; // The generated nonce.
    int64 expires_in = 3 [json_name = "expires_in"]; // The expiration time of the nonce in seconds.
}

// Claims represents the claims to be included in a token or nonce.
// It includes standard JWT claims and custom claims.
message Claims {
    string issuer = 1 [json_name = "iss"]; // The issuer of the token.
    string subject = 2 [json_name = "sub"]; // The subject of the token.
    string audience = 3 [json_name = "aud"]; // The audience of the token.
    string jwt_id = 7 [json_name = "jti"]; // The unique identifier for the token.
    repeated string scopes = 8 [json_name = "scopes"]; // The scopes included in the token.
    map<string, google.protobuf.Value> custom_claims = 9 [json_name = "custom_claims"]; // Custom claims included in the token.
}

// DPoP represents the DPoP proof required for token operations.
message DPoP {
    string proof = 1 [json_name = "proof"]; // The DPoP proof.
    int64 ttl_minutes = 2 [json_name = "ttl_minutes"]; // The time-to-live of the DPoP proof in minutes.
    DPoPClaims want_claims = 3 [json_name = "want_claims"]; // The claims included in the DPoP proof.
}

// DPoPClaims represents the claims included in a DPoP proof.
message DPoPClaims {
    string htm = 2 [json_name = "htm"]; // The HTTP method of the request.
    string htu = 3 [json_name = "htu"]; // The HTTP URI of the request.
    string rh = 6 [json_name = "rh"]; // The request body hash.
}

// ValidationStatus represents the validation status of a token or nonce.
enum ValidationStatus {
    INVALID = 0; // The token or nonce is invalid.
    VALID = 1; // The token or nonce is valid.
}
