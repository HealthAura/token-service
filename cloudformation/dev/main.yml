AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to deploy a Go Lambda function with a DynamoDB table, KMS keys, and an S3 bucket on a private network.

Resources:
  # VPC for the private network
  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: LambdaVPC-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet for Bastion
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: PublicSubnet-Bastion

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Bastion Security Group
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Bastion Host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Consider restricting to your IP
      Tags:
        - Key: Name
          Value: BastionSecurityGroup

  # Bastion Host
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0440d3b780d96b29d  # Amazon Linux 2023 AMI - update for your region
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds: 
        - !Ref BastionSecurityGroup
      KeyName: GithubRunnerEC2KeyPair  
      Tags:
        - Key: Name
          Value: BastionHost

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: LambdaPrivateVPC

  # Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: LambdaPrivateSubnet

  # Security Group for the Lambda function
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow internal communication within VPC
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # KMS Key for signing tokens
  KMSSigningKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for signing tokens with NIST P-256
      KeyUsage: SIGN_VERIFY
      KeySpec: ECC_NIST_P256
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Sign
              - kms:DescribeKey
            Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
      Tags:
        - Key: Purpose
          Value: TokenSigning

  # Alias for the KMS Key
  KMSSigningKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/TokenSigningKey
      TargetKeyId: !Ref KMSSigningKey

  # KMS Key for DynamoDB encryption
  DynamoDBKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for encrypting DynamoDB data
      KeyUsage: ENCRYPT_DECRYPT
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: dynamodb.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:GenerateDataKey
              - kms:DescribeKey
            Resource: "*"
      Tags:
        - Key: Purpose
          Value: DynamoDBEncryption

  # Alias for the DynamoDB KMS Key
  DynamoDBKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/DynamoDBKey
      TargetKeyId: !Ref DynamoDBKMSKey

  # DynamoDB Table
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PrivateDynamoDBTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS 
        KMSMasterKeyId: !Ref DynamoDBKMSKey
      Tags:
        - Key: Name
          Value: PrivateDynamoDBTable

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaDynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:GenerateDataKey
                  - kms:DescribeKey
                Resource: !GetAtt DynamoDBKMSKey.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub
                  - "arn:aws:s3:::${BucketName}/*"
                  - BucketName: !ImportValue Healthaura-Dev-LambdaCodeBucket-Name
        - PolicyName: LambdaNetworkInterfaceManagement
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"


  GoLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GoLambdaFunction
      Runtime: provided.al2023
      Handler: main
      Code:
        S3Bucket: !ImportValue Healthaura-Dev-LambdaCodeBucket-Name
        S3Key: deployment.zip
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Environment:
        Variables:
          TOKEN_SERVICE_SIGNING_KEY_ARN: !Ref KMSSigningKey
          TOKEN_SERVICE_DYNAMO_TABLE_NAME: !Ref DynamoDBTable
          TOKEN_SERVICE_DYNAMO_KEY_ID: !Ref DynamoDBKMSKey

Outputs:
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref GoLambdaFunction

  DynamoDBTableName:
    Description: Name of the DynamoDB table
    Value: !Ref DynamoDBTable

  KMSKeyId:
    Description: ID of the KMS Key for signing
    Value: !Ref KMSSigningKey

  DynamoDBKMSKeyId:
    Description: ID of the DynamoDB KMS Key
    Value: !Ref DynamoDBKMSKey
