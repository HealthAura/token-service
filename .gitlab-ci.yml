stages:
  - intg-build-and-validate
  - intg-deploy
  - intg-integration-tests

  # - qa-prod-build
  # - qa-db-migrate
  # - qa-deploy
  # - qa-integration-tests


# intg_unit_test:
#   environment:
#     name: intg
#   tags:
#     - intg
#   image: golang:1.22
#   stage: intg-build-and-validate
#   script:
#     - echo "Running tests..."
#     - go test -v --run=Unit ./...
  
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'

intg_build:
  environment:
    name: intg
  tags:
    - intg
  stage: intg-build-and-validate    
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
    AWS_DEFAULT_REGION: us-east-1
    IMAGE_TAG: 339713094731.dkr.ecr.us-east-1.amazonaws.com/$CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA
    ECR_REGISTRY: 339713094731.dkr.ecr.us-east-1.amazonaws.com
  before_script:
    - apk add --no-cache aws-cli
    - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
  script:
    - echo "Building Docker image..."
    - docker build -t $IMAGE_TAG .
    - echo "Pushing Docker image to registry..."
    - docker push $IMAGE_TAG
  after_script:
    - docker logout $ECR_REGISTRY
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'

# intg_version_check:
#   environment:
#     name: intg
#   tags:
#     - intg
#   image: ubuntu:24.04
#   stage: intg-build-and-validate
#   before_script:
#     - apt-get -y update; apt-get -y install git
#   script:
#     - |
#       if [ "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" ]; then
#         git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME:$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
#         BASE_SHA=$(git merge-base HEAD $CI_MERGE_REQUEST_TARGET_BRANCH_NAME)
#       else
#         BASE_SHA=$(git rev-parse HEAD^)
#       fi
#       # Check if the VERSION file has changed using the BASE_SHA
#       if ! git diff --name-only $BASE_SHA -- VERSION; then
#         echo "VERSION file has not changed."
#         exit 1
#       else
#         echo "VERSION file has changed."
#       fi
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'

intg_deploy:
  environment:
    name: intg
  tags:
    - intg
  stage: intg-deploy
  image: 
    name: alpine/helm:latest
    entrypoint: ['']
  script:
    - >
      helm upgrade 
      --install token-service ./build/helm 
      --namespace sp-intg 
      --kube-context healthauraio/kube-agent:healthauradev 
      --set image.repository=339713094731.dkr.ecr.us-east-1.amazonaws.com/token-service
      --set image.tag=$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA 
      --set redisURL=$TOKEN_SERVICE_REDIS_URL
      --set signingKeyARN=$TOKEN_SERVICE_SIGNING_KEY_ARN
      --set databaseKeyARN=$TOKEN_SERVICE_KMS_DATABASE_KEY_ARN
      --set issuer=$TOKEN_SERVICE_ISSUER
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'


intg_integration_tests:
  environment:
    name: intg
  tags:
    - intg
  image: golang:1.22
  stage: intg-integration-tests
  script:
    - echo "Running tests..."
    - export TOKEN_SERVICE_REDIS_URL=$TOKEN_SERVICE_REDIS_URL
    - export TOKEN_SERVICE_REDIS_URL=$TOKEN_SERVICE_SIGNING_KEY_ARN
    - export TOKEN_SERVICE_KMS_DATABASE_KEY_ARN=$TOKEN_SERVICE_KMS_DATABASE_KEY_ARN
    - export TOKEN_SERVICE_ISSUER=$TOKEN_SERVICE_ISSUER
    - export TOKEN_SERVICE_PORT=8080
    - go test -v --run=Integration ./integration_tests/...
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'

# qa_prod_build:
#   stage: qa-prod-build
#   image: docker:24.0.5
#   services:
#     - docker:24.0.5-dind
#   variables:
#     DOCKER_HOST: tcp://docker:2376
#     DOCKER_TLS_CERTDIR: "/certs"
#     DOCKER_TLS_VERIFY: 1
#     DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
#     REGISTRY: registry.digitalocean.com/healthaura/$CI_PROJECT_NAME
#     IMAGE_TAG_COMMIT: $REGISTRY:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA
#   before_script:
#     - echo "Logging into Digital Ocean Docker registry..."
#     - docker login -u $DO_REGISTRY_USER -p $DO_REGISTRY_PASSWORD registry.digitalocean.com
#   script:
#     - export VERSION_TAG=$REGISTRY:$(cat VERSION)
#     - echo "Building Docker image..."
#     - echo $IMAGE_TAG_COMMIT
#     - echo $VERSION_TAG
#     - docker build -t $IMAGE_TAG_COMMIT -t $VERSION_TAG .
#     - echo "Pushing Docker image to registry..."
#     - docker push $REGISTRY --all-tags
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == "main"'

# qa_db_migrate:
#   environment:
#     name: qa
#   tags:
#     - qa
#   image: ubuntu:24.04
#   stage: qa-db-migrate
#   before_script:
#     - apt-get -y update; apt-get -y install curl
#     - curl -sSf https://atlasgo.sh | sh
#   script:
#     - atlas migrate apply --dir "file://ent/migrate/migrations" --url $TOKEN_SERVICE_POSTGRES_URL
#     - atlas migrate status --dir "file://ent/migrate/migrations" --url $TOKEN_SERVICE_POSTGRES_URL
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == "main"'
#       when: manual

# qa_deploy:
#   environment:
#     name: qa
#   stage: qa-deploy
#   image: 
#     name: alpine/helm:latest
#     entrypoint: ['']
#   script:
#     - export VERSION_CONTENT=$(cat VERSION)
#     - echo $VERSION_CONTENT
#     - >
#       helm upgrade 
#       --install token-service ./build/helm 
#       --namespace qa 
#       --kube-context healthauraio/kube-agent:healthauradev 
#       --set image.repository=registry.digitalocean.com/healthaura/token-service
#       --set image.tag=$VERSION_CONTENT
#       --set signingKey=$TOKEN_SERVICE_SIGNING_KEY
#       --set postgresURL=$TOKEN_SERVICE_POSTGRES_URL
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == "main"'
#       needs:
#         - qa_db_migrate


# qa_integration_tests:
#   environment:
#     name: qa
#   tags:
#     - qa
#   image: golang:1.20
#   stage: qa-integration-tests
#   script:
#     - echo "Running tests..."
#     - go test -v --run=Integration ./integration_tests/...
#   rules:
#     - if: '$CI_COMMIT_REF_NAME == "main"'
#       needs:
#        - qa_deploy