name: Validate and Deploy

on:
  pull_request:
    paths:
      - 'cloudformation/token-service-stack.yml'
  push:
    branches: [ main ]
    paths:
      - 'cloudformation/token-service-stack.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod

env:
  AWS_REGION: us-east-1
  STACK_NAME: token-service-stack
  TEMPLATE_PATH: ./cloudformation/token-service-stack.yml

jobs:
  quality-check:
    name: Code Quality Checks
    runs-on: [self-hosted, healthaura-dev]
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22  

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.53.3
          golangci-lint --version

      # Step 4: Run golangci-lint
      - name: Lint code
        continue-on-error: true     
        run: golangci-lint run ./...

      # Step 5: Check code formatting
      - name: Check formatting
        run: gofmt -l .
        continue-on-error: true  # Show formatting issues but do not fail the job

      # Step 6: Run tests
      - name: Run tests
        continue-on-error: true     
        run: go test -v ./...

  unit-test:
    name: Code Unit Tests
    runs-on: [self-hosted, healthaura-dev]
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22  

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.53.3
          golangci-lint --version

      # Step 4: Run golangci-lint
      - name: Lint code
        continue-on-error: true     
        run: golangci-lint run ./...

      # Step 5: Check code formatting
      - name: Check formatting
        run: gofmt -l .
        continue-on-error: true  # Show formatting issues but do not fail the job

      # Step 6: Run tests
      - name: Run tests
        continue-on-error: true     
        run: go test -v ./...

  build-and-deploy:
    name: Build and Upload to S3
    runs-on: [self-hosted, healthaura-dev]
    needs: [quality-check, unit-test]
    outputs:
      s3_key: ${{ steps.set-s3-key.outputs.s3_key }}
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22  

      - name: Build Lambda Binary
        run: |
          GOOS=linux GOARCH=amd64 go build -o main main.go

      - name: Zip Lambda Binary
        run: zip deployment.zip main

      - name: Determine Environment
        id: determine-environment
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "environment=dev" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=qa" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.workflow_run.inputs.environment }}" == "prod" ]]; then
            echo "environment=prod" >> $GITHUB_ENV
          else
            echo "Unknown environment. Exiting."
            exit 1
          fi

      - name: Upload to S3
        run: |
          aws s3 cp deployment.zip s3://healthaura-${{ env.environment }}-lambda-code-bucket/deployment-${{ github.sha }}.zip
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}

      - name: Set S3 Key Output
        id: set-s3-key
        run: echo "::set-output name=s3_key::deployment-${{ github.sha }}.zip"

  # dev-deployment:
  #   name: Dev Infrastructure Deployment
  #   needs: [build-and-deploy]
  #   if: github.event_name == 'pull_request'
  #   runs-on: [self-hosted, healthaura-dev]
  #   environment: dev
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Deploy to Dev
  #       uses: aws-actions/aws-cloudformation-github-deploy@v1
  #       with:
  #         name: token-service-stack
  #         template: ${{ env.TEMPLATE_PATH }}
  #         parameter-overrides: "Environment=dev,S3Key=${{ needs.build-and-deploy.outputs.s3_key }}"
  #         capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
  #         no-fail-on-empty-changeset: "1"

  # qa-deployment:
  #   name: QA Infrastructure Deployment 
  #   needs: [build-and-deploy]
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   runs-on: [self-hosted, healthaura-dev]
  #   environment: qa
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Deploy to QA
  #       uses: aws-actions/aws-cloudformation-github-deploy@v1
  #       with:
  #         name: ${{ env.STACK_NAME }}-qa
  #         template: ${{ env.TEMPLATE_PATH }}
  #         parameter-overrides: |
  #           Environment=qa
  #           S3Key=${{ needs.build-and-deploy.outputs.s3_key }}
  #         capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM
  #         no-fail-on-empty-changeset: "1"

  # prod-deployment:
  #   name: Prod Infrastructure Deployment
  #   needs: [build-and-deploy]
  #   if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
  #   runs-on: [self-hosted, healthaura-dev]
  #   environment:
  #     name: prod
  #     url: ${{ steps.output.outputs.StackURL }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Create Change Set
  #       run: |
  #         aws cloudformation create-change-set \
  #           --stack-name ${{ env.STACK_NAME }}-prod \
  #           --template-body file://${{ env.TEMPLATE_PATH }} \
  #           --parameters ParameterKey=Environment,ParameterValue=prod \
  #           --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
  #           --change-set-name ${GITHUB_SHA} \
  #           --description "Changeset for ${GITHUB_SHA}"

  #     - name: Wait for Change Set
  #       run: |
  #         aws cloudformation wait change-set-create-complete \
  #           --stack-name ${{ env.STACK_NAME }}-prod \
  #           --change-set-name ${GITHUB_SHA}

  #     - name: Review Change Set
  #       run: |
  #         aws cloudformation describe-change-set \
  #           --stack-name ${{ env.STACK_NAME }}-prod \
  #           --change-set-name ${GITHUB_SHA}

  #     - name: Deploy to Production
  #       uses: aws-actions/aws-cloudformation-github-deploy@v1
  #       with:
  #         name: ${{ env.STACK_NAME }}-prod
  #         template: ${{ env.TEMPLATE_PATH }}
  #         parameter-overrides: "Environment=prod"
  #         capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM
  #         no-fail-on-empty-changeset: "1"

  # integration-test:
  #   name: Integration Tests
  #   needs: [dev-deployment]
  #   runs-on: [self-hosted, healthaura-dev]
  #   steps:
  #     # Step 1: Checkout the code
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Get API Gateway URL
  #       id: get-api-url
  #       run: |
  #         URL=$(aws cloudformation describe-stacks \
  #           --stack-name token-service-stack \
  #           --query "Stacks[0].Outputs[?OutputKey=='ApiGatewayInvokeURL'].OutputValue" \
  #           --output text)
  #         echo "API_GATEWAY_URL=$URL" >> $GITHUB_ENV

  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: 1.22  

  #     # Step 6: Run integration tests
  #     - name: Run integration tests
  #       env:
  #         API_GATEWAY_URL: ${{ env.API_GATEWAY_URL }}
  #       run: |
  #         export TOKEN_SERVICE_URL=$API_GATEWAY_URL
  #         go test -v --run=TestTokenLambdaIntegration ./...
        
    
