// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/go-chi/chi/v5"
)

// ProtobufAny defines model for protobufAny.
type ProtobufAny struct {
	Type                 *string                `json:"@type,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RpcStatus defines model for rpcStatus.
type RpcStatus struct {
	Code    *int32         `json:"code,omitempty"`
	Details *[]ProtobufAny `json:"details,omitempty"`
	Message *string        `json:"message,omitempty"`
}

// TokenserviceClaims Claims represents the claims to be included in a token or nonce.
// It includes standard JWT claims and custom claims.
type TokenserviceClaims struct {
	// Aud The audience of the token.
	Aud *string `json:"aud,omitempty"`

	// CustomClaims Custom claims included in the token.
	CustomClaims *map[string]interface{} `json:"custom_claims,omitempty"`

	// Iss The issuer of the token.
	Iss *string `json:"iss,omitempty"`

	// Jti The unique identifier for the token.
	Jti *string `json:"jti,omitempty"`

	// Scopes The scopes included in the token.
	Scopes *[]string `json:"scopes,omitempty"`

	// Sub The subject of the token.
	Sub *string `json:"sub,omitempty"`
}

// TokenserviceDPoP DPoP represents the DPoP proof required for token operations.
type TokenserviceDPoP struct {
	// Proof The DPoP proof.
	Proof *string `json:"proof,omitempty"`

	// TtlMinutes The time-to-live of the DPoP proof in minutes.
	TtlMinutes *string `json:"ttl_minutes,omitempty"`

	// WantClaims DPoPClaims represents the claims included in a DPoP proof.
	WantClaims *TokenserviceDPoPClaims `json:"want_claims,omitempty"`
}

// TokenserviceDPoPClaims DPoPClaims represents the claims included in a DPoP proof.
type TokenserviceDPoPClaims struct {
	// Htm The HTTP method of the request.
	Htm *string `json:"htm,omitempty"`

	// Htu The HTTP URI of the request.
	Htu *string `json:"htu,omitempty"`

	// Rh The request body hash.
	Rh *string `json:"rh,omitempty"`
}

// TokenserviceGenerateNonceRequest GenerateNonceRequest is the request message for the GenerateNonce RPC.
// It includes the claims required to generate a new nonce.
type TokenserviceGenerateNonceRequest struct {
	// Claims Claims represents the claims to be included in a token or nonce.
	// It includes standard JWT claims and custom claims.
	Claims *TokenserviceClaims `json:"claims,omitempty"`

	// NonceTtl The time-to-live of the nonce in minutes.
	NonceTtl *string `json:"nonce_ttl,omitempty"`
}

// TokenserviceGenerateNonceResponse GenerateNonceResponse is the response message for the GenerateNonce RPC.
// It includes the generated nonce and the expiration time.
type TokenserviceGenerateNonceResponse struct {
	// ExpiresIn The expiration time of the nonce in seconds.
	ExpiresIn *string `json:"expires_in,omitempty"`

	// Nonce The generated nonce.
	Nonce *string `json:"nonce,omitempty"`
}

// TokenserviceGenerateRequest GenerateRequest is the request message for the Generate RPC.
// It includes the claims and DPoP proof required to generate a new token.
type TokenserviceGenerateRequest struct {
	// AccessTokenTtl The time-to-live of the access token in minutes.
	AccessTokenTtl *string `json:"access_token_ttl,omitempty"`

	// Claims Claims represents the claims to be included in a token or nonce.
	// It includes standard JWT claims and custom claims.
	Claims *TokenserviceClaims `json:"claims,omitempty"`

	// Dpop DPoP represents the DPoP proof required for token operations.
	Dpop *TokenserviceDPoP `json:"dpop,omitempty"`

	// RefreshTokenTtl The time-to-live of the refresh token in minutes.
	RefreshTokenTtl *string `json:"refresh_token_ttl,omitempty"`
}

// TokenserviceGenerateResponse GenerateResponse is the response message for the Generate RPC.
// It includes the generated access token, refresh token, and the expiration time.
type TokenserviceGenerateResponse struct {
	// AccessToken The generated access token.
	AccessToken *string `json:"access_token,omitempty"`

	// AccessTokenExpiry The expiration time of the access token in seconds.
	AccessTokenExpiry *string `json:"access_token_expiry,omitempty"`

	// RefreshToken The generated refresh token.
	RefreshToken *string `json:"refresh_token,omitempty"`

	// RefreshTokenExpiry The expiration time of the refresh token in seconds.
	RefreshTokenExpiry *string `json:"refresh_token_expiry,omitempty"`
}

// TokenserviceRefreshRequest RefreshRequest is the request message for the Refresh RPC.
// It includes the refresh token and DPoP proof required to generate a new token.
type TokenserviceRefreshRequest struct {
	// AccessTokenTtl The time-to-live of the access token in minutes.
	AccessTokenTtl *string `json:"access_token_ttl,omitempty"`

	// NewTokenDpop DPoP represents the DPoP proof required for token operations.
	NewTokenDpop *TokenserviceDPoP `json:"new_token_dpop,omitempty"`

	// RefreshDpop DPoP represents the DPoP proof required for token operations.
	RefreshDpop *TokenserviceDPoP `json:"refresh_dpop,omitempty"`

	// RefreshToken The refresh token used to generate a new access token.
	RefreshToken *string `json:"refresh_token,omitempty"`

	// RefreshTokenTtl The time-to-live of the refresh token in minutes.
	RefreshTokenTtl *string   `json:"refresh_token_ttl,omitempty"`
	RequiredScopes  *[]string `json:"required_scopes,omitempty"`
}

// TokenserviceRefreshResponse RefreshResponse is the response message for the Refresh RPC.
// It includes the new access token, refresh token, and the expiration time.
type TokenserviceRefreshResponse struct {
	// AccessToken The new access token.
	AccessToken *string `json:"access_token,omitempty"`

	// AccessTokenExpiry The expiration time of the access token in seconds.
	AccessTokenExpiry *string `json:"access_token_expiry,omitempty"`

	// RefreshToken The new refresh token.
	RefreshToken *string `json:"refresh_token,omitempty"`

	// RefreshTokenExpiry The expiration time of the refresh token in seconds.
	RefreshTokenExpiry *string `json:"refresh_token_expiry,omitempty"`
}

// TokenServiceGenerateJSONRequestBody defines body for TokenServiceGenerate for application/json ContentType.
type TokenServiceGenerateJSONRequestBody = TokenserviceGenerateRequest

// TokenServiceGenerateNonceJSONRequestBody defines body for TokenServiceGenerateNonce for application/json ContentType.
type TokenServiceGenerateNonceJSONRequestBody = TokenserviceGenerateNonceRequest

// TokenServiceRefreshJSONRequestBody defines body for TokenServiceRefresh for application/json ContentType.
type TokenServiceRefreshJSONRequestBody = TokenserviceRefreshRequest

// Getter for additional properties for ProtobufAny. Returns the specified
// element and whether it was found
func (a ProtobufAny) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProtobufAny
func (a *ProtobufAny) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProtobufAny to handle AdditionalProperties
func (a *ProtobufAny) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["@type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading '@type': %w", err)
		}
		delete(object, "@type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProtobufAny to handle AdditionalProperties
func (a ProtobufAny) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Type != nil {
		object["@type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '@type': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// TokenServiceGenerateWithBody request with any body
	TokenServiceGenerateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TokenServiceGenerate(ctx context.Context, body TokenServiceGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TokenServiceGenerateNonceWithBody request with any body
	TokenServiceGenerateNonceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TokenServiceGenerateNonce(ctx context.Context, body TokenServiceGenerateNonceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TokenServiceRefreshWithBody request with any body
	TokenServiceRefreshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TokenServiceRefresh(ctx context.Context, body TokenServiceRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) TokenServiceGenerateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenServiceGenerateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenServiceGenerate(ctx context.Context, body TokenServiceGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenServiceGenerateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenServiceGenerateNonceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenServiceGenerateNonceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenServiceGenerateNonce(ctx context.Context, body TokenServiceGenerateNonceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenServiceGenerateNonceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenServiceRefreshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenServiceRefreshRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenServiceRefresh(ctx context.Context, body TokenServiceRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenServiceRefreshRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewTokenServiceGenerateRequest calls the generic TokenServiceGenerate builder with application/json body
func NewTokenServiceGenerateRequest(server string, body TokenServiceGenerateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTokenServiceGenerateRequestWithBody(server, "application/json", bodyReader)
}

// NewTokenServiceGenerateRequestWithBody generates requests for TokenServiceGenerate with any type of body
func NewTokenServiceGenerateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/generate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTokenServiceGenerateNonceRequest calls the generic TokenServiceGenerateNonce builder with application/json body
func NewTokenServiceGenerateNonceRequest(server string, body TokenServiceGenerateNonceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTokenServiceGenerateNonceRequestWithBody(server, "application/json", bodyReader)
}

// NewTokenServiceGenerateNonceRequestWithBody generates requests for TokenServiceGenerateNonce with any type of body
func NewTokenServiceGenerateNonceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/generate-nonce")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTokenServiceRefreshRequest calls the generic TokenServiceRefresh builder with application/json body
func NewTokenServiceRefreshRequest(server string, body TokenServiceRefreshJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTokenServiceRefreshRequestWithBody(server, "application/json", bodyReader)
}

// NewTokenServiceRefreshRequestWithBody generates requests for TokenServiceRefresh with any type of body
func NewTokenServiceRefreshRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// TokenServiceGenerateWithBodyWithResponse request with any body
	TokenServiceGenerateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenServiceGenerateResponse, error)

	TokenServiceGenerateWithResponse(ctx context.Context, body TokenServiceGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*TokenServiceGenerateResponse, error)

	// TokenServiceGenerateNonceWithBodyWithResponse request with any body
	TokenServiceGenerateNonceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenServiceGenerateNonceResponse, error)

	TokenServiceGenerateNonceWithResponse(ctx context.Context, body TokenServiceGenerateNonceJSONRequestBody, reqEditors ...RequestEditorFn) (*TokenServiceGenerateNonceResponse, error)

	// TokenServiceRefreshWithBodyWithResponse request with any body
	TokenServiceRefreshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenServiceRefreshResponse, error)

	TokenServiceRefreshWithResponse(ctx context.Context, body TokenServiceRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*TokenServiceRefreshResponse, error)
}

type TokenServiceGenerateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenserviceGenerateResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TokenServiceGenerateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TokenServiceGenerateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TokenServiceGenerateNonceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenserviceGenerateNonceResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TokenServiceGenerateNonceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TokenServiceGenerateNonceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TokenServiceRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TokenserviceRefreshResponse
	JSONDefault  *RpcStatus
}

// Status returns HTTPResponse.Status
func (r TokenServiceRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TokenServiceRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// TokenServiceGenerateWithBodyWithResponse request with arbitrary body returning *TokenServiceGenerateResponse
func (c *ClientWithResponses) TokenServiceGenerateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenServiceGenerateResponse, error) {
	rsp, err := c.TokenServiceGenerateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenServiceGenerateResponse(rsp)
}

func (c *ClientWithResponses) TokenServiceGenerateWithResponse(ctx context.Context, body TokenServiceGenerateJSONRequestBody, reqEditors ...RequestEditorFn) (*TokenServiceGenerateResponse, error) {
	rsp, err := c.TokenServiceGenerate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenServiceGenerateResponse(rsp)
}

// TokenServiceGenerateNonceWithBodyWithResponse request with arbitrary body returning *TokenServiceGenerateNonceResponse
func (c *ClientWithResponses) TokenServiceGenerateNonceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenServiceGenerateNonceResponse, error) {
	rsp, err := c.TokenServiceGenerateNonceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenServiceGenerateNonceResponse(rsp)
}

func (c *ClientWithResponses) TokenServiceGenerateNonceWithResponse(ctx context.Context, body TokenServiceGenerateNonceJSONRequestBody, reqEditors ...RequestEditorFn) (*TokenServiceGenerateNonceResponse, error) {
	rsp, err := c.TokenServiceGenerateNonce(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenServiceGenerateNonceResponse(rsp)
}

// TokenServiceRefreshWithBodyWithResponse request with arbitrary body returning *TokenServiceRefreshResponse
func (c *ClientWithResponses) TokenServiceRefreshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenServiceRefreshResponse, error) {
	rsp, err := c.TokenServiceRefreshWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenServiceRefreshResponse(rsp)
}

func (c *ClientWithResponses) TokenServiceRefreshWithResponse(ctx context.Context, body TokenServiceRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*TokenServiceRefreshResponse, error) {
	rsp, err := c.TokenServiceRefresh(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenServiceRefreshResponse(rsp)
}

// ParseTokenServiceGenerateResponse parses an HTTP response from a TokenServiceGenerateWithResponse call
func ParseTokenServiceGenerateResponse(rsp *http.Response) (*TokenServiceGenerateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TokenServiceGenerateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenserviceGenerateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTokenServiceGenerateNonceResponse parses an HTTP response from a TokenServiceGenerateNonceWithResponse call
func ParseTokenServiceGenerateNonceResponse(rsp *http.Response) (*TokenServiceGenerateNonceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TokenServiceGenerateNonceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenserviceGenerateNonceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTokenServiceRefreshResponse parses an HTTP response from a TokenServiceRefreshWithResponse call
func ParseTokenServiceRefreshResponse(rsp *http.Response) (*TokenServiceRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TokenServiceRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TokenserviceRefreshResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest RpcStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Generate creates a new access token and refresh token based on the provided claims and DPoP proof.
	// (POST /v1/generate)
	TokenServiceGenerate(w http.ResponseWriter, r *http.Request)
	// GenerateNonce creates a new nonce based on the provided claims.
	// (POST /v1/generate-nonce)
	TokenServiceGenerateNonce(w http.ResponseWriter, r *http.Request)
	// Refresh generates a new access token and refresh token using the provided refresh token and DPoP proof.
	// (POST /v1/refresh)
	TokenServiceRefresh(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Generate creates a new access token and refresh token based on the provided claims and DPoP proof.
// (POST /v1/generate)
func (_ Unimplemented) TokenServiceGenerate(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// GenerateNonce creates a new nonce based on the provided claims.
// (POST /v1/generate-nonce)
func (_ Unimplemented) TokenServiceGenerateNonce(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Refresh generates a new access token and refresh token using the provided refresh token and DPoP proof.
// (POST /v1/refresh)
func (_ Unimplemented) TokenServiceRefresh(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// TokenServiceGenerate operation middleware
func (siw *ServerInterfaceWrapper) TokenServiceGenerate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TokenServiceGenerate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TokenServiceGenerateNonce operation middleware
func (siw *ServerInterfaceWrapper) TokenServiceGenerateNonce(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TokenServiceGenerateNonce(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TokenServiceRefresh operation middleware
func (siw *ServerInterfaceWrapper) TokenServiceRefresh(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TokenServiceRefresh(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/generate", wrapper.TokenServiceGenerate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/generate-nonce", wrapper.TokenServiceGenerateNonce)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/refresh", wrapper.TokenServiceRefresh)
	})

	return r
}
