// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.2
// source: v1/token-service.proto

package token_service_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ValidationStatus represents the validation status of a token or nonce.
type ValidationStatus int32

const (
	ValidationStatus_INVALID ValidationStatus = 0 // The token or nonce is invalid.
	ValidationStatus_VALID   ValidationStatus = 1 // The token or nonce is valid.
)

// Enum value maps for ValidationStatus.
var (
	ValidationStatus_name = map[int32]string{
		0: "INVALID",
		1: "VALID",
	}
	ValidationStatus_value = map[string]int32{
		"INVALID": 0,
		"VALID":   1,
	}
)

func (x ValidationStatus) Enum() *ValidationStatus {
	p := new(ValidationStatus)
	*p = x
	return p
}

func (x ValidationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_token_service_proto_enumTypes[0].Descriptor()
}

func (ValidationStatus) Type() protoreflect.EnumType {
	return &file_v1_token_service_proto_enumTypes[0]
}

func (x ValidationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidationStatus.Descriptor instead.
func (ValidationStatus) EnumDescriptor() ([]byte, []int) {
	return file_v1_token_service_proto_rawDescGZIP(), []int{0}
}

// GenerateRequest is the request message for the Generate RPC.
// It includes the claims and DPoP proof required to generate a new token.
type GenerateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Claims          *Claims `protobuf:"bytes,1,opt,name=claims,proto3" json:"claims,omitempty"`                                             // Claims to be included in the token.
	AccessTokenTtl  int64   `protobuf:"varint,2,opt,name=access_token_ttl,json=accessTokenTtl,proto3" json:"access_token_ttl,omitempty"`    // The time-to-live of the access token in minutes.
	RefreshTokenTtl int64   `protobuf:"varint,3,opt,name=refresh_token_ttl,json=refreshTokenTtl,proto3" json:"refresh_token_ttl,omitempty"` // The time-to-live of the refresh token in minutes.
	Dpop            *DPoP   `protobuf:"bytes,4,opt,name=dpop,proto3" json:"dpop,omitempty"`                                                 // DPoP proof for the token.
}

func (x *GenerateRequest) Reset() {
	*x = GenerateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_token_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRequest) ProtoMessage() {}

func (x *GenerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_token_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRequest.ProtoReflect.Descriptor instead.
func (*GenerateRequest) Descriptor() ([]byte, []int) {
	return file_v1_token_service_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateRequest) GetClaims() *Claims {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *GenerateRequest) GetAccessTokenTtl() int64 {
	if x != nil {
		return x.AccessTokenTtl
	}
	return 0
}

func (x *GenerateRequest) GetRefreshTokenTtl() int64 {
	if x != nil {
		return x.RefreshTokenTtl
	}
	return 0
}

func (x *GenerateRequest) GetDpop() *DPoP {
	if x != nil {
		return x.Dpop
	}
	return nil
}

// GenerateResponse is the response message for the Generate RPC.
// It includes the generated access token, refresh token, and the expiration time.
type GenerateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken        string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`                         // The generated access token.
	RefreshToken       string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`                      // The generated refresh token.
	AccessTokenExpiry  int64  `protobuf:"varint,3,opt,name=access_token_expiry,json=accessTokenExpiry,proto3" json:"access_token_expiry,omitempty"`    // The expiration time of the access token in seconds.
	RefreshTokenExpiry int64  `protobuf:"varint,4,opt,name=refresh_token_expiry,json=refreshTokenExpiry,proto3" json:"refresh_token_expiry,omitempty"` // The expiration time of the refresh token in seconds.
}

func (x *GenerateResponse) Reset() {
	*x = GenerateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_token_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateResponse) ProtoMessage() {}

func (x *GenerateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_token_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateResponse.ProtoReflect.Descriptor instead.
func (*GenerateResponse) Descriptor() ([]byte, []int) {
	return file_v1_token_service_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *GenerateResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *GenerateResponse) GetAccessTokenExpiry() int64 {
	if x != nil {
		return x.AccessTokenExpiry
	}
	return 0
}

func (x *GenerateResponse) GetRefreshTokenExpiry() int64 {
	if x != nil {
		return x.RefreshTokenExpiry
	}
	return 0
}

// RefreshRequest is the request message for the Refresh RPC.
// It includes the refresh token and DPoP proof required to generate a new token.
type RefreshRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken    string   `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`             // The refresh token used to generate a new access token.
	AccessTokenTtl  int64    `protobuf:"varint,2,opt,name=access_token_ttl,json=accessTokenTtl,proto3" json:"access_token_ttl,omitempty"`    // The time-to-live of the access token in minutes.
	RefreshTokenTtl int64    `protobuf:"varint,3,opt,name=refresh_token_ttl,json=refreshTokenTtl,proto3" json:"refresh_token_ttl,omitempty"` // The time-to-live of the refresh token in minutes.
	RefreshDpop     *DPoP    `protobuf:"bytes,4,opt,name=refresh_dpop,json=refreshDpop,proto3" json:"refresh_dpop,omitempty"`                // DPoP proof for the token.
	NewTokenDpop    *DPoP    `protobuf:"bytes,5,opt,name=new_token_dpop,json=newTokenDpop,proto3" json:"new_token_dpop,omitempty"`           // DPoP proof for the new token.
	RequiredScopes  []string `protobuf:"bytes,6,rep,name=required_scopes,json=requiredScopes,proto3" json:"required_scopes,omitempty"`
}

func (x *RefreshRequest) Reset() {
	*x = RefreshRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_token_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshRequest) ProtoMessage() {}

func (x *RefreshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_token_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshRequest.ProtoReflect.Descriptor instead.
func (*RefreshRequest) Descriptor() ([]byte, []int) {
	return file_v1_token_service_proto_rawDescGZIP(), []int{2}
}

func (x *RefreshRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *RefreshRequest) GetAccessTokenTtl() int64 {
	if x != nil {
		return x.AccessTokenTtl
	}
	return 0
}

func (x *RefreshRequest) GetRefreshTokenTtl() int64 {
	if x != nil {
		return x.RefreshTokenTtl
	}
	return 0
}

func (x *RefreshRequest) GetRefreshDpop() *DPoP {
	if x != nil {
		return x.RefreshDpop
	}
	return nil
}

func (x *RefreshRequest) GetNewTokenDpop() *DPoP {
	if x != nil {
		return x.NewTokenDpop
	}
	return nil
}

func (x *RefreshRequest) GetRequiredScopes() []string {
	if x != nil {
		return x.RequiredScopes
	}
	return nil
}

// RefreshResponse is the response message for the Refresh RPC.
// It includes the new access token, refresh token, and the expiration time.
type RefreshResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken        string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`                         // The new access token.
	RefreshToken       string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`                      // The new refresh token.
	AccessTokenExpiry  int64  `protobuf:"varint,3,opt,name=access_token_expiry,json=accessTokenExpiry,proto3" json:"access_token_expiry,omitempty"`    // The expiration time of the access token in seconds.
	RefreshTokenExpiry int64  `protobuf:"varint,4,opt,name=refresh_token_expiry,json=refreshTokenExpiry,proto3" json:"refresh_token_expiry,omitempty"` // The expiration time of the refresh token in seconds.
}

func (x *RefreshResponse) Reset() {
	*x = RefreshResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_token_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshResponse) ProtoMessage() {}

func (x *RefreshResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_token_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshResponse.ProtoReflect.Descriptor instead.
func (*RefreshResponse) Descriptor() ([]byte, []int) {
	return file_v1_token_service_proto_rawDescGZIP(), []int{3}
}

func (x *RefreshResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *RefreshResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *RefreshResponse) GetAccessTokenExpiry() int64 {
	if x != nil {
		return x.AccessTokenExpiry
	}
	return 0
}

func (x *RefreshResponse) GetRefreshTokenExpiry() int64 {
	if x != nil {
		return x.RefreshTokenExpiry
	}
	return 0
}

// GenerateNonceRequest is the request message for the GenerateNonce RPC.
// It includes the claims required to generate a new nonce.
type GenerateNonceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Claims   *Claims `protobuf:"bytes,1,opt,name=claims,proto3" json:"claims,omitempty"`                      // Claims to be included in the nonce.
	NonceTtl int64   `protobuf:"varint,2,opt,name=nonce_ttl,json=nonceTtl,proto3" json:"nonce_ttl,omitempty"` // The time-to-live of the nonce in minutes.
}

func (x *GenerateNonceRequest) Reset() {
	*x = GenerateNonceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_token_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateNonceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateNonceRequest) ProtoMessage() {}

func (x *GenerateNonceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_token_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateNonceRequest.ProtoReflect.Descriptor instead.
func (*GenerateNonceRequest) Descriptor() ([]byte, []int) {
	return file_v1_token_service_proto_rawDescGZIP(), []int{4}
}

func (x *GenerateNonceRequest) GetClaims() *Claims {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *GenerateNonceRequest) GetNonceTtl() int64 {
	if x != nil {
		return x.NonceTtl
	}
	return 0
}

// GenerateNonceResponse is the response message for the GenerateNonce RPC.
// It includes the generated nonce and the expiration time.
type GenerateNonceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce     string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`                           // The generated nonce.
	ExpiresIn int64  `protobuf:"varint,3,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"` // The expiration time of the nonce in seconds.
}

func (x *GenerateNonceResponse) Reset() {
	*x = GenerateNonceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_token_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateNonceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateNonceResponse) ProtoMessage() {}

func (x *GenerateNonceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_token_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateNonceResponse.ProtoReflect.Descriptor instead.
func (*GenerateNonceResponse) Descriptor() ([]byte, []int) {
	return file_v1_token_service_proto_rawDescGZIP(), []int{5}
}

func (x *GenerateNonceResponse) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *GenerateNonceResponse) GetExpiresIn() int64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

// Claims represents the claims to be included in a token or nonce.
// It includes standard JWT claims and custom claims.
type Claims struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer       string                     `protobuf:"bytes,1,opt,name=issuer,json=iss,proto3" json:"issuer,omitempty"`                                                                                              // The issuer of the token.
	Subject      string                     `protobuf:"bytes,2,opt,name=subject,json=sub,proto3" json:"subject,omitempty"`                                                                                            // The subject of the token.
	Audience     string                     `protobuf:"bytes,3,opt,name=audience,json=aud,proto3" json:"audience,omitempty"`                                                                                          // The audience of the token.
	JwtId        string                     `protobuf:"bytes,7,opt,name=jwt_id,json=jti,proto3" json:"jwt_id,omitempty"`                                                                                              // The unique identifier for the token.
	Scopes       []string                   `protobuf:"bytes,8,rep,name=scopes,proto3" json:"scopes,omitempty"`                                                                                                       // The scopes included in the token.
	CustomClaims map[string]*structpb.Value `protobuf:"bytes,9,rep,name=custom_claims,proto3" json:"custom_claims,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Custom claims included in the token.
}

func (x *Claims) Reset() {
	*x = Claims{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_token_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claims) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claims) ProtoMessage() {}

func (x *Claims) ProtoReflect() protoreflect.Message {
	mi := &file_v1_token_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claims.ProtoReflect.Descriptor instead.
func (*Claims) Descriptor() ([]byte, []int) {
	return file_v1_token_service_proto_rawDescGZIP(), []int{6}
}

func (x *Claims) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Claims) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Claims) GetAudience() string {
	if x != nil {
		return x.Audience
	}
	return ""
}

func (x *Claims) GetJwtId() string {
	if x != nil {
		return x.JwtId
	}
	return ""
}

func (x *Claims) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *Claims) GetCustomClaims() map[string]*structpb.Value {
	if x != nil {
		return x.CustomClaims
	}
	return nil
}

// DPoP represents the DPoP proof required for token operations.
type DPoP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof      string      `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`                              // The DPoP proof.
	TtlMinutes int64       `protobuf:"varint,2,opt,name=ttl_minutes,json=ttlMinutes,proto3" json:"ttl_minutes,omitempty"` // The time-to-live of the DPoP proof in minutes.
	WantClaims *DPoPClaims `protobuf:"bytes,3,opt,name=want_claims,json=wantClaims,proto3" json:"want_claims,omitempty"`  // The claims included in the DPoP proof.
}

func (x *DPoP) Reset() {
	*x = DPoP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_token_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DPoP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DPoP) ProtoMessage() {}

func (x *DPoP) ProtoReflect() protoreflect.Message {
	mi := &file_v1_token_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DPoP.ProtoReflect.Descriptor instead.
func (*DPoP) Descriptor() ([]byte, []int) {
	return file_v1_token_service_proto_rawDescGZIP(), []int{7}
}

func (x *DPoP) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *DPoP) GetTtlMinutes() int64 {
	if x != nil {
		return x.TtlMinutes
	}
	return 0
}

func (x *DPoP) GetWantClaims() *DPoPClaims {
	if x != nil {
		return x.WantClaims
	}
	return nil
}

// DPoPClaims represents the claims included in a DPoP proof.
type DPoPClaims struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Htm string `protobuf:"bytes,2,opt,name=htm,proto3" json:"htm,omitempty"` // The HTTP method of the request.
	Htu string `protobuf:"bytes,3,opt,name=htu,proto3" json:"htu,omitempty"` // The HTTP URI of the request.
	Rh  string `protobuf:"bytes,6,opt,name=rh,proto3" json:"rh,omitempty"`   // The request body hash.
}

func (x *DPoPClaims) Reset() {
	*x = DPoPClaims{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_token_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DPoPClaims) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DPoPClaims) ProtoMessage() {}

func (x *DPoPClaims) ProtoReflect() protoreflect.Message {
	mi := &file_v1_token_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DPoPClaims.ProtoReflect.Descriptor instead.
func (*DPoPClaims) Descriptor() ([]byte, []int) {
	return file_v1_token_service_proto_rawDescGZIP(), []int{8}
}

func (x *DPoPClaims) GetHtm() string {
	if x != nil {
		return x.Htm
	}
	return ""
}

func (x *DPoPClaims) GetHtu() string {
	if x != nil {
		return x.Htu
	}
	return ""
}

func (x *DPoPClaims) GetRh() string {
	if x != nil {
		return x.Rh
	}
	return ""
}

var File_v1_token_service_proto protoreflect.FileDescriptor

var file_v1_token_service_proto_rawDesc = []byte{
	0x0a, 0x16, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x52, 0x06,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x74, 0x6c,
	0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x74, 0x6c, 0x12, 0x26, 0x0a, 0x04,
	0x64, 0x70, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x50, 0x6f, 0x50, 0x52, 0x04,
	0x64, 0x70, 0x6f, 0x70, 0x22, 0xbc, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x22, 0xa5, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x74, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x54, 0x74, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x74,
	0x6c, 0x12, 0x35, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x64, 0x70, 0x6f,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x50, 0x6f, 0x50, 0x52, 0x0b, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x44, 0x70, 0x6f, 0x70, 0x12, 0x38, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x70, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x50, 0x6f, 0x50, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x70,
	0x6f, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0f,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0x61, 0x0a, 0x14, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x54, 0x74, 0x6c, 0x22, 0x4c, 0x0a, 0x15,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x22, 0x9e, 0x02, 0x0a, 0x06, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x13, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x62,
	0x12, 0x15, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x75, 0x64, 0x12, 0x13, 0x0a, 0x06, 0x6a, 0x77, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x74, 0x69, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x1a, 0x57, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x78, 0x0a, 0x04, 0x44,
	0x50, 0x6f, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x74, 0x6c,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x74, 0x74, 0x6c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x77, 0x61,
	0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x50, 0x6f, 0x50, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x52, 0x0a, 0x77, 0x61, 0x6e, 0x74, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x22, 0x40, 0x0a, 0x0a, 0x44, 0x50, 0x6f, 0x50, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x74, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x68, 0x74, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x74, 0x75, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x68, 0x74, 0x75, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x68, 0x2a, 0x2a, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x01, 0x32, 0x81, 0x02, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x1c, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x13, 0x5a, 0x11, 0x2f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_token_service_proto_rawDescOnce sync.Once
	file_v1_token_service_proto_rawDescData = file_v1_token_service_proto_rawDesc
)

func file_v1_token_service_proto_rawDescGZIP() []byte {
	file_v1_token_service_proto_rawDescOnce.Do(func() {
		file_v1_token_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_token_service_proto_rawDescData)
	})
	return file_v1_token_service_proto_rawDescData
}

var file_v1_token_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_token_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_v1_token_service_proto_goTypes = []interface{}{
	(ValidationStatus)(0),         // 0: tokenservice.ValidationStatus
	(*GenerateRequest)(nil),       // 1: tokenservice.GenerateRequest
	(*GenerateResponse)(nil),      // 2: tokenservice.GenerateResponse
	(*RefreshRequest)(nil),        // 3: tokenservice.RefreshRequest
	(*RefreshResponse)(nil),       // 4: tokenservice.RefreshResponse
	(*GenerateNonceRequest)(nil),  // 5: tokenservice.GenerateNonceRequest
	(*GenerateNonceResponse)(nil), // 6: tokenservice.GenerateNonceResponse
	(*Claims)(nil),                // 7: tokenservice.Claims
	(*DPoP)(nil),                  // 8: tokenservice.DPoP
	(*DPoPClaims)(nil),            // 9: tokenservice.DPoPClaims
	nil,                           // 10: tokenservice.Claims.CustomClaimsEntry
	(*structpb.Value)(nil),        // 11: google.protobuf.Value
}
var file_v1_token_service_proto_depIdxs = []int32{
	7,  // 0: tokenservice.GenerateRequest.claims:type_name -> tokenservice.Claims
	8,  // 1: tokenservice.GenerateRequest.dpop:type_name -> tokenservice.DPoP
	8,  // 2: tokenservice.RefreshRequest.refresh_dpop:type_name -> tokenservice.DPoP
	8,  // 3: tokenservice.RefreshRequest.new_token_dpop:type_name -> tokenservice.DPoP
	7,  // 4: tokenservice.GenerateNonceRequest.claims:type_name -> tokenservice.Claims
	10, // 5: tokenservice.Claims.custom_claims:type_name -> tokenservice.Claims.CustomClaimsEntry
	9,  // 6: tokenservice.DPoP.want_claims:type_name -> tokenservice.DPoPClaims
	11, // 7: tokenservice.Claims.CustomClaimsEntry.value:type_name -> google.protobuf.Value
	1,  // 8: tokenservice.TokenService.Generate:input_type -> tokenservice.GenerateRequest
	3,  // 9: tokenservice.TokenService.Refresh:input_type -> tokenservice.RefreshRequest
	5,  // 10: tokenservice.TokenService.GenerateNonce:input_type -> tokenservice.GenerateNonceRequest
	2,  // 11: tokenservice.TokenService.Generate:output_type -> tokenservice.GenerateResponse
	4,  // 12: tokenservice.TokenService.Refresh:output_type -> tokenservice.RefreshResponse
	6,  // 13: tokenservice.TokenService.GenerateNonce:output_type -> tokenservice.GenerateNonceResponse
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_v1_token_service_proto_init() }
func file_v1_token_service_proto_init() {
	if File_v1_token_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_token_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_token_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_token_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_token_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_token_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateNonceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_token_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateNonceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_token_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claims); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_token_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DPoP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_token_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DPoPClaims); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_token_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_token_service_proto_goTypes,
		DependencyIndexes: file_v1_token_service_proto_depIdxs,
		EnumInfos:         file_v1_token_service_proto_enumTypes,
		MessageInfos:      file_v1_token_service_proto_msgTypes,
	}.Build()
	File_v1_token_service_proto = out.File
	file_v1_token_service_proto_rawDesc = nil
	file_v1_token_service_proto_goTypes = nil
	file_v1_token_service_proto_depIdxs = nil
}
